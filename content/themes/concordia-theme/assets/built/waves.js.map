{"version":3,"file":"waves.js","sources":["waves.js"],"sourcesContent":["console.clear()\n\nclass Utils {\n  static randomRange(min, max) {\n    return Math.random() * (max - min) + min\n  }\n\n  static mapRange (value, inputMin, inputMax, outputMin, outputMax, clamp) {\n    if (Math.abs(inputMin - inputMax) < Number.EPSILON) {\n      return outputMin;\n    } else {\n      var outVal = ((value - inputMin) / (inputMax - inputMin) * (outputMax - outputMin) + outputMin);\n      if (clamp) {\n        if (outputMax < outputMin) {\n          if (outVal < outputMax) outVal = outputMax;\n          else if (outVal > outputMin) outVal = outputMin;\n        } else {\n          if (outVal > outputMax) outVal = outputMax;\n          else if (outVal < outputMin) outVal = outputMin;\n        }\n      }\n      return outVal;\n    }\n  }\n}\nimport { createNoise2D } from 'simplex-noise';\nimport alea from 'alea';\n\nUtils.simplex = createNoise2D(Alea('seed'));\n\nclass App {\n  constructor() {\n    this.config = {\n      bgColor: chroma({ h: 230, s: 0.5, l: 0.92}).hex(),\n      // https://www.colourlovers.com/palette/577622/One_Sixty-Eight\n      colorSchema: [\n        '#5E9FA3',\n        '#DCD1B4',\n        '#FAB87F',\n        '#F87E7B',\n        '#B05574',\n      ],\n      numOfLayers: 9\n    }\n    \n    this.canvas = document.getElementById('c')\n    this.ctx = this.canvas.getContext('2d')\n    \n    this.shadowCanvas = document.createElement('canvas')\n    this.shadowCtx = this.shadowCanvas.getContext('2d')\n    \n    this.timestamp = 0\n    this.fpsHistory = []\n    \n    this.setUpVars()\n    this.setUpListeners()\n    // this.setUpGui()\n    this.update()\n  }\n\n  setUpGui() {\n    const pane = new Tweakpane()\n    const folder = pane.addFolder({\n      expanded: false,\n      title: 'Settings',\n    })\n    folder.addInput(this.config, 'bgColor')\n  }\n  \n  setUpVars() {\n    this.canvas.width = this.shadowCanvas.width = this.wWidth = window.innerWidth\n    this.canvas.height = this.shadowCanvas.height = this.wHeight = window.innerHeight\n    this.wCenterX = this.wWidth / 2\n    this.wCenterY = this.wHeight / 2\n    this.wHypot = Math.hypot(this.wWidth, this.wHeight)\n    this.wMin = Math.min(this.wWidth, this.wHeight)\n    \n    this.angle = Math.PI * 0.25\n    this.layers = this.getLayers()\n  }\n\n  getLayers() {\n    const layers = []\n    let currColorId = 0\n    \n    for (let lid = 0; lid <= this.config.numOfLayers; lid++) {\n      const colorAngle = Math.PI * 2 * (lid / this.config.numOfLayers)\n      \n      layers.push({\n        id: lid, // used for noise offset\n        progress: 1 - (lid / this.config.numOfLayers),\n        color: this.config.colorSchema[currColorId]\n      })\n\n      currColorId++\n      \n      if (currColorId >= this.config.colorSchema.length) {\n        currColorId = 0\n      }\n    }\n    \n    return layers\n  }\n  \n  setUpListeners() {\n    window.addEventListener('resize', this.setUpVars.bind(this))\n  }\n\n  drawLayer(ctx, layer) {\n    const segmentBaseSize = 10\n    const segmentCount = Math.round(this.wHypot / segmentBaseSize)\n    const segmentSize = this.wHypot / segmentCount\n    const waveAmplitude = segmentSize * 4\n    const noiseZoom = 0.03\n    \n    ctx.save()\n    ctx.translate(this.wCenterX, this.wCenterY)\n    ctx.rotate(Math.sin(this.angle))\n    \n    ctx.beginPath()\n    ctx.moveTo(-this.wHypot / 2, this.wHypot / 2 - (this.wHypot * layer.progress))\n    ctx.lineTo(-this.wHypot / 2, this.wHypot / 2)\n    ctx.lineTo(this.wHypot / 2, this.wHypot / 2)\n    ctx.lineTo(this.wHypot / 2, this.wHypot / 2 - (this.wHypot * layer.progress))\n    \n    for (let sid = 1; sid <= segmentCount; sid++) {\n      const n = Utils.simplex.noise3D(sid * noiseZoom, sid * noiseZoom, layer.id + this.timestamp)\n      const heightOffset = n * waveAmplitude\n      \n      ctx.lineTo((this.wHypot / 2) - (sid * segmentSize), this.wHypot / 2 - (this.wHypot * layer.progress) + heightOffset)\n    }\n    \n    ctx.closePath()\n    ctx.fillStyle = layer.color\n    ctx.fill()\n    ctx.restore()\n  }\n  \n  draw(ctx) {\n    ctx.save()\n    ctx.fillStyle = this.config.bgColor\n    ctx.fillRect(0, 0, this.wWidth, this.wHeight)\n    ctx.restore()\n    \n    this.layers.forEach(layer => this.drawLayer(ctx, layer))\n  }\n  \n  update(t) {\n    const prevTimestamp = this.timestamp * 5000\n    \n    if (t) {\n      let shiftNeeded = false\n      this.timestamp = t / 5000\n      this.angle += 0.001\n      \n      this.layers.forEach(layer => {\n        layer.progress += 0.001\n        \n        if (layer.progress > 1 + (1 / (this.layers.length - 1))) {\n          layer.progress = 0\n          shiftNeeded = true\n        }\n      })\n      \n      if (shiftNeeded) {\n        this.layers.push(this.layers.shift())\n      }\n      \n      this.draw(this.shadowCtx)\n    }\n    \n    this.ctx.clearRect(0, 0, this.wWidth, this.wHeight)\n    this.ctx.drawImage(this.shadowCanvas, 0, 0)\n    \n    // show fps\n    const fps = Math.round(1 / (t - prevTimestamp) * 1000)\n    this.fpsHistory.unshift(fps)\n    this.fpsHistory.length = 5\n    this.ctx.font = '16px sans-serif'\n    this.ctx.fillText(this.fpsHistory.reduce((a,b) => a+b) / 5, 50, 50)\n    \n    window.requestAnimationFrame(this.update.bind(this))\n  }\n}\n\nnew App()\n"],"names":["console","clear","Utils","randomRange","min","max","Math","random","mapRange","value","inputMin","inputMax","outputMin","outputMax","clamp","abs","Number","EPSILON","outVal","createNoise2D","alea","simplex","Alea","App","constructor","this","config","bgColor","chroma","h","s","l","hex","colorSchema","numOfLayers","canvas","document","getElementById","ctx","getContext","shadowCanvas","createElement","shadowCtx","timestamp","fpsHistory","setUpVars","setUpListeners","update","setUpGui","Tweakpane","addFolder","expanded","title","addInput","width","wWidth","window","innerWidth","height","wHeight","innerHeight","wCenterX","wCenterY","wHypot","hypot","wMin","angle","PI","layers","getLayers","let","currColorId","lid","push","id","progress","color","length","addEventListener","bind","drawLayer","layer","segmentCount","round","segmentSize","waveAmplitude","save","translate","rotate","sin","beginPath","moveTo","lineTo","sid","n","noise3D","closePath","fillStyle","fill","restore","draw","fillRect","forEach","t","prevTimestamp","shiftNeeded","shift","clearRect","drawImage","fps","unshift","font","fillText","reduce","a","b","requestAnimationFrame"],"mappings":"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"}